#!/bin/bash
# **php-build** is a utility for building various versions
# of **PHP** for using them side by side with each other.
#
# The overall structure is loosly borrowed from Sam Stephenson's [ruby-build][rb].
#
# Installing is currently done by checking out the [php-build][pb] Repository:
#
#     git clone git://github.com/CHH/php-build.git
#     cd php-build
#     ./bin/php-build --definitions
#
# [rb]: https://github.com/sstephenson/ruby-build
# [pb]: https://github.com/CHH/php-build

# Usage
# -----

# The most important line in every shell script
set -e

# This is the usage message, like it's done in 
# [shocco](https://github.com/rtomayko/shocco).
#
#/ php-build, Compile and Install PHP
#/
#/ Usage: php-build [--definitions] [--ini|i <environment>] [<definition>] [<prefix>] [<cflags>] [<makeflags>]
#/
#/ Arguments:
#/   definition:    What release should be used, as well as release-specific
#/                  configuration.
#/   prefix:        All built Executables, Configs and Libs are placed in this
#/                  directory. It's created if it doesn't exist.
#/   cflags:        Additional CFLAGS to pass to GCC. Example "-O0 -finline-functions"
#/   makeflags:     Additional make flags. Example "-j4 -l2.5"
#/
#/ Options:
#/   --definitions: Lists all available definitions
#/   --ini|i:       Specifies which php.ini-<environment> from the
#/                  source distribution is used as default php.ini
#/

# Set the `PHP_BUILD_DEBUG` environment variable to
# `yes` to trigger the `set -x` call, which in turn
# outputs every issued shell command to `STDOUT`.
if [ -n "$PHP_BUILD_DEBUG" ]; then
    set -x
fi

# Preserve STDERR on FD3, so we can easily log build
# errors on FD2 to a file and use FD3 for php-build's 
# visible error messages.
exec 3<&2

# Simpe function for resolving a
# relative path to an absolute one
# by only using `cd -L`.
#
# This is needed because BSD's `readlink` does not
# support the `-f` flag which is an issue on OSX.
function realpath {
    local path="$1"

    if [ -z "$path" ]; then
        echo "realpath: Path is empty" >&3
        return 1
    fi

    local cwd="$(pwd)"

    cd -L "$path"
    echo "$(pwd)"
    cd "$cwd"
}

# Common Variables
# ----------------

# This is the path where php-build is installed. This
# is treated as the base for the `share/` and `tmp/`
# folders of php-build.
PHP_BUILD_ROOT=$(realpath "$(dirname $0)/..")
TMP="$PHP_BUILD_ROOT/tmp/php-build"

# This file gets copied to `$PREFIX/etc/php.ini` once
# the build is complete. This is by default the PHP tarball's
# `php.ini-production`.
PHP_DEFAULT_INI="php.ini-production"

# Read the list of arguments for the call to `./configure`
# in PHP's source.
#
# These arguments are read from `share/php-build/default_configure_options`.
CONFIGURE_OPTIONS=$(cat "$PHP_BUILD_ROOT/share/php-build/default_configure_options")

# If `-i` or `--ini` is given as first argument, then
# treat the second argument as `php.ini` file.
if [ "$1" = "-i" ] || [ "$1" = "--ini" ]; then
    # If an existing path is passed (and the path is a file)
    # then use this file, otherwise use `php.ini-<value>`
    # from the tarball.
    if [ -f "$2" ]; then
        PHP_DEFAULT_INI="$2"
    else
        PHP_DEFAULT_INI="php.ini-$2"
    fi
    shift
    shift
fi

# This is the name of the definition we want to build.
DEFINITION=$1

# The built PHP version is placed in this directory.
PREFIX=$2

# Additional CFLAGS
CFLAGS=$3

# Additional make options
MAKE_FLAGS=$4

# Error Code to return if a defintion was not found.
E_DEFINITION_NOT_FOUND=127

# Processes the Help front matter of the script
# and displays it on STDERR.
function display_usage {
    grep '^#/' <"$0" | cut -c4- >&3
}

# Init the directories on first run.
function init {
    if [ ! -d "$TMP" ]; then
        mkdir -p "$TMP"
    fi

    if [ ! -d "$TMP/packages" ]; then
        mkdir "$TMP/packages"
    fi

    if [ ! -d "$TMP/source" ]; then
        mkdir "$TMP/source"
    fi

    if [ ! -d "$PHP_BUILD_ROOT/var/log/php-build" ]; then
        mkdir -p "$PHP_BUILD_ROOT/var/log/php-build"
    fi

    if [ ! -d "$PHP_BUILD_ROOT/share/php-build/after-install.d" ]; then
        mkdir -p "$PHP_BUILD_ROOT/share/php-build/after-install.d"
    fi
}

# Logs a given log text with a [marker] to
# STDERR.
function log {
    local marker="$1"
    local text="$2"

    echo "    [$marker]:  $text" >&3
}

# Uses uname to check if php-build is run on OSX.
# This is used later on to enable specifc fixes for
# OSX oddnesses in library file placement.
function is_osx {
    local uname=$(uname)

    if [ "$uname" = "Darwin" ]; then
        return 0
    else
        return 1
    fi
}

# Downloads a PHP Source Tarball and extracts it
# to `$TMP/source/$DEFINITION`.
function download {
    local url=$1
    local package_file="$TMP/packages/$(basename $url)"
    local temp_package="$TMP/$(basename $url)"

    log "Downloading" "$url"

    if [ -f "$temp_package" ]; then
        rm "$temp_package"
    fi

    if [ ! -f "$package_file" ]; then
        wget -qP "$TMP" "$url" > /dev/null
        cp "$temp_package" "$TMP/packages"
        rm "$temp_package"
    fi

    if [ -d "$TMP/source/$DEFINITION" ]; then
        rm -rf "$TMP/source/$DEFINITION"
    fi

    mkdir "$TMP/source/$DEFINITION"

    # The PHP tarballs have one directory, which is named
    # `php-<something underminable>`, so skip this directory
    # on extraction.
    tar -xj --strip-components 1 -f "$package_file" -C "$TMP/source/$DEFINITION"
    return $?
}

# List all defintions found in `share/php-build/definitions`.
#
function list_definitions {
    {
        for definition in "$PHP_BUILD_ROOT/share/php-build/definitions/"*
        do
            echo $(basename "$definition")
        done
    } | sort >&3
}

function trigger_after_install {
    export PHP_BUILD_ROOT
    export PREFIX
    local triggers_dir="$PHP_BUILD_ROOT/share/php-build/after-install.d/"
    local triggers=$(ls "$triggers_dir")

    if [ -n "$triggers" ]; then
        for trigger in "$triggers_dir"*; do
            log "After Install Trigger" "$(basename $trigger)"
            "$trigger" 2>&4
        done
    fi
}

function load_plugins {
    if [ ! -d "$1" ]; then
        return 1
    fi

    for plugin in "$1/"*.sh
    do
        source $plugin
        echo "Loaded $(basename $plugin .sh) Plugin."
    done
}

function build_package {
    local source_path=$1
    local cwd="$(pwd)"

    if [ ! -d "$PREFIX" ]; then
        mkdir "$PREFIX"
    fi

    configure_package "$source_path"

    log "Additional Make flags" "$MAKE_FLAGS"

    log "Make" "$source_path"

    cd "$source_path"
    {
        make clean
        make $MAKE_FLAGS
        make install
        make clean
    } > "$MAKE_LOG_PATH"
    cd "$cwd"

    if [ -f "$PREFIX/bin/php.dSYM" ]; then
        mv "$PREFIX/bin/php.dSYM" "$PREFIX/bin/php"
    fi

    if [ -f "$PREFIX/bin/php-cgi.dSYM" ]; then
        mv "$PREFIX/bin/php-cgi.dSYM" "$PREFIX/bin/php-cgi"
    fi

    if [ -n "$PHP_DEFAULT_INI" ]; then
        if [ -f "$source_path/$PHP_DEFAULT_INI" ]; then
            cp "$source_path/$PHP_DEFAULT_INI" "$PREFIX/etc/php.ini"
        else
            if [ -f "$PHP_DEFAULT_INI" ]; then
                cp "$PHP_DEFAULT_INI" "$PREFIX/etc/php.ini"
            fi
        fi
    fi
}

# Definition commands
# -------------------

# ### install_package
#
# Downloads and builds the PHP tarball from the given URL.
# For now only `.tar.bz2` archives are supported.
function install_package {
    local url=$1

    {
        download $url
        build_package "$TMP/source/$DEFINITION"
    } >&4 2>&1
}

# ### configure_option
#
# This function sets and unsets arguments for `configure`. Pass it
# the `-D` option to unset the argument given in `$2`. Otherwise
# the first argument is the name of the option and the second
# argument contains the optional value.
function configure_option {
    if [ "$1" = "-D" ]; then
        # This variable will contain the filtered arguments.
        local filtered=

        for option in $CONFIGURE_OPTIONS; do
            # If the argument starts with the given string in `$1`
            # then skip it from concatenation. Otherwise add it to
            # the filtered options.
            case "$option" in
                "$2"*) ;;
                *) filtered="$filtered $option";;
            esac
        done
        
        # Trim the leading whitespace added in the concatenation.
        filtered=$(echo "$filtered" | sed -e 's/[ ]*//')

        # Then replace the old argument list with the new one.
        CONFIGURE_OPTIONS="$filtered"
        return 0
    else
        if [ "$1" = "-R" ]; then
            configure_option -D "$2"
            configure_option "$2" "$3"
            return 0
        fi
    fi

    CONFIGURE_OPTIONS="$CONFIGURE_OPTIONS $1"

    if [ -n "$2" ]; then
        CONFIGURE_OPTIONS="$CONFIGURE_OPTIONS=$2"
    fi
}

# ### with_openssl
#
# Configures PHP with OpenSSL support.
# 
# This is left in for backwards compatibility with
# definitions which were written before `--with-openssl`
# was in the list of default configure arguments.
function with_openssl {
    stub=1
}

# ### with_pear
#
# Configures a `pear` install in `$PREFIX/pear`.
function with_pear {
    pear_dir="$PREFIX/pear"

    [ ! -d "$PREFIX/pear" ] && mkdir -p "$PREFIX/pear"

    configure_option "--with-pear" "$PREFIX/pear"
}

# Configure Stage
# ---------------

# This is invoked by `build_package` and is used to
# build PHP with the arguments in `$CONFIGURE_OPTIONS`.
#
function configure_package {
    local source_path=$1
    local backup_pwd=$(pwd)

    # Mac OSX stores some libraries (for example `libpng`)
    # in `/usr/X11/lib` instead of `/usr/lib`.
    #
    # This currently builds PHP without the `gettext` and `readline`
    # extensions, as I've currently not got them to work on my machine.
    if is_osx; then
        configure_option -D "--with-gettext"
        configure_option -D "--with-readline"
        configure_option "--with-libedit"

        configure_option -R "--with-png-dir" "/usr/X11"
    fi

    # Add the config-file-path, config-file-scan-dir aswell as the
    # prefix to the build options, these cannot be changed by definitions.
    local argv="$CONFIGURE_OPTIONS \
--with-config-file-path="$PREFIX/etc" \
--with-config-file-scan-dir="$PREFIX/etc/conf.d" \
--prefix=$PREFIX"
    
    log "Configure" "$source_path"

    cd "$source_path"

    if [ ! -d "$PREFIX/etc/conf.d" ]; then
        mkdir -p "$PREFIX/etc/conf.d"
    fi

    # Set the lib dir to `lib64` on **x86_64**
    # systems.
    if [ "$(uname -p)" = "x86_64" ]; then
        argv="$argv --with-libdir=lib64"
    fi

    log "Additionnal CFLAGS" "$CFLAGS"

    ./configure CFLAGS="$CFLAGS" $argv >  "$CONFIGURE_LOG_PATH"

    cd "$backup_pwd"
}

# Handles build errors, and displays the last 10 lines
# of the build log.
function build_error {
    {
        echo
        echo "BUILD ERROR"
        echo $(tail -n10 "$LOG_PATH")
        echo
        echo "The full Log is available here ${LOG_PATH}"
        echo
    } >&3
    
    # Removes the prefix when the build fails.
    cleanup_abort
}

function cleanup_abort {
    rm -rf "$PREFIX"
}

# Here the magic begins
# ---------------------

# Set up the directories needed for the source
# and the downloaded packages.
init

# Generate the Path for the logs.
TIME="$(date "+%Y%m%d%H%M%S")"
LOG_PATH="$PHP_BUILD_ROOT/var/log/php-build/error.$DEFINITION.$TIME.log"
MAKE_LOG_PATH="$PHP_BUILD_ROOT/var/log/php-build/make.$DEFINITION.$TIME.log"
CONFIGURE_LOG_PATH="$PHP_BUILD_ROOT/var/log/php-build/configure.$DEFINITION.$TIME.log"

# Redirect everything logged to STDERR (except messages by php-build itself)
# to the Log file.
exec 4<> "$LOG_PATH"

# Display the Usage message if no arguments are given.
if [ -z $1 ]; then
    display_usage
    exit 1
fi

if [ "$1" = "--definitions" ]; then
    list_definitions
    exit 0
fi

# Check if the requested Definition exists.
if [ ! -f "$PHP_BUILD_ROOT/share/php-build/definitions/$DEFINITION" ]; then
    echo "Definition $DEFINITION not found." >&3
    exit $E_DEFINITION_NOT_FOUND
fi

# Load all definition plugins. Plugins register functions
# for use whithin definitions. See the xdebug and pyrus plugins for
# examples.
load_plugins "$PHP_BUILD_ROOT/share/php-build/plugins.d"

echo "$PHP_DEFAULT_INI gets used as php.ini"

echo
echo "Building $DEFINITION into $PREFIX"
echo

# Handle script termination with the `cleanup_abort`.
trap cleanup_abort SIGINT SIGTERM

# Handle Script Errors with `build_error`.
trap build_error ERR EXIT

# Source the definition file
source "$PHP_BUILD_ROOT/share/php-build/definitions/$DEFINITION"

# Run executables placed in `share/php-build/after-install.d`
#
trigger_after_install 2>&4

# Unbind the error handler.
trap - ERR
trap - EXIT

# Display a notice if build warnings got logged.
if [ -n $LOG_PATH ]; then
    log "Info" "The Log File is not empty, but the Build did not fail.\
 Maybe just warnings got logged.\
 You can review the log in $LOG_PATH"
fi

log "Success" "Built $DEFINITION successfully."

trap - SIGINT
trap - SIGTERM
